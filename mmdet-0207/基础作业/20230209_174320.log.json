{"env_info": "sys.platform: win32\nPython: 3.9.16 (main, Jan 11 2023, 16:16:36) [MSC v.1916 64 bit (AMD64)]\nCUDA available: True\nGPU 0: NVIDIA GeForce RTX 3080 Ti\nCUDA_HOME: C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.4\nNVCC: Cuda compilation tools, release 11.4, V11.4.48\nMSVC: \u7528\u4e8e x64 \u7684 Microsoft (R) C/C++ \u4f18\u5316\u7f16\u8bd1\u5668 19.29.30143 \u7248\nGCC: n/a\nPyTorch: 1.12.1\nPyTorch compiling details: PyTorch built with:\n  - C++ Version: 199711\n  - MSVC 192829337\n  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)\n  - OpenMP 2019\n  - LAPACK is enabled (usually provided by MKL)\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.3\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.3.2  (built against CUDA 11.5)\n  - Magma 2.5.4\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.3.2, CXX_COMPILER=C:/cb/pytorch_1000000000000/work/tmp_bin/sccache-cl.exe, CXX_FLAGS=/DWIN32 /D_WINDOWS /GR /EHsc /w /bigobj -DUSE_PTHREADPOOL -openmp:experimental -IC:/cb/pytorch_1000000000000/work/mkl/include -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOCUPTI -DUSE_FBGEMM -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.12.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=OFF, USE_NNPACK=OFF, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.13.1\nOpenCV: 4.7.0\nMMCV: 1.7.1\nMMCV Compiler: MSVC 192829924\nMMCV CUDA Compiler: 11.3\nMMDetection: 2.28.1+", "config": "model = dict(\n    type='MaskRCNN',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(type='Pretrained', checkpoint='torchvision://resnet50')),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    roi_head=dict(\n        type='StandardRoIHead',\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCBBoxHead',\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=1,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=False,\n            loss_cls=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n            loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n        mask_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=14, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        mask_head=dict(\n            type='FCNMaskHead',\n            num_convs=4,\n            in_channels=256,\n            conv_out_channels=256,\n            num_classes=1,\n            loss_mask=dict(\n                type='CrossEntropyLoss', use_mask=True, loss_weight=1.0))),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=-1,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.5,\n                neg_iou_thr=0.5,\n                min_pos_iou=0.5,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=512,\n                pos_fraction=0.25,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=True),\n            mask_size=28,\n            pos_weight=-1,\n            debug=False)),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100,\n            mask_thr_binary=0.5)))\ndataset_type = 'CocoDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True, with_mask=True),\n    dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1333, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file='../datasets/balloon/train/train_coco.json',\n        img_prefix='../datasets/balloon/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True, with_mask=True),\n            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])\n        ],\n        classes=('balloon', )),\n    val=dict(\n        type='CocoDataset',\n        ann_file='../datasets/balloon/val/val_coco.json',\n        img_prefix='../datasets/balloon/val/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('balloon', )),\n    test=dict(\n        type='CocoDataset',\n        ann_file='../datasets/balloon/val/val_coco.json',\n        img_prefix='../datasets/balloon/val/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('balloon', )))\nevaluation = dict(metric=['bbox', 'segm'])\noptimizer = dict(type='SGD', lr=0.02, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=12)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = 'checkpoints/mask_rcnn_r50_fpn_1x_coco_20200205-d4b0c5d6.pth'\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=16)\nclasses = ('balloon', )\nwork_dir = './work_dirs\\yyh_balloon_config'\nauto_resume = False\ngpu_ids = [0]\n", "seed": 168574580, "exp_name": "yyh_balloon_config.py"}
{"mode": "val", "epoch": 1, "iter": 13, "lr": 0.00122, "bbox_mAP": 0.1396, "bbox_mAP_50": 0.2629, "bbox_mAP_75": 0.1216, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.0693, "bbox_mAP_l": 0.1834, "bbox_mAP_copypaste": "0.1396 0.2629 0.1216 0.0000 0.0693 0.1834", "segm_mAP": 0.1721, "segm_mAP_50": 0.2614, "segm_mAP_75": 0.1815, "segm_mAP_s": 0.0, "segm_mAP_m": 0.0359, "segm_mAP_l": 0.2615, "segm_mAP_copypaste": "0.1721 0.2614 0.1815 0.0000 0.0359 0.2615"}
{"mode": "val", "epoch": 2, "iter": 13, "lr": 0.00246, "bbox_mAP": 0.5306, "bbox_mAP_50": 0.7594, "bbox_mAP_75": 0.7105, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.3957, "bbox_mAP_l": 0.5961, "bbox_mAP_copypaste": "0.5306 0.7594 0.7105 0.0000 0.3957 0.5961", "segm_mAP": 0.6496, "segm_mAP_50": 0.7642, "segm_mAP_75": 0.7468, "segm_mAP_s": 0.0, "segm_mAP_m": 0.4301, "segm_mAP_l": 0.7337, "segm_mAP_copypaste": "0.6496 0.7642 0.7468 0.0000 0.4301 0.7337"}
{"mode": "val", "epoch": 3, "iter": 13, "lr": 0.0037, "bbox_mAP": 0.5992, "bbox_mAP_50": 0.8132, "bbox_mAP_75": 0.7302, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.5186, "bbox_mAP_l": 0.6644, "bbox_mAP_copypaste": "0.5992 0.8132 0.7302 0.0000 0.5186 0.6644", "segm_mAP": 0.6834, "segm_mAP_50": 0.8132, "segm_mAP_75": 0.8132, "segm_mAP_s": 0.0, "segm_mAP_m": 0.5034, "segm_mAP_l": 0.7693, "segm_mAP_copypaste": "0.6834 0.8132 0.8132 0.0000 0.5034 0.7693"}
{"mode": "val", "epoch": 4, "iter": 13, "lr": 0.00494, "bbox_mAP": 0.6741, "bbox_mAP_50": 0.8393, "bbox_mAP_75": 0.8291, "bbox_mAP_s": 0.0505, "bbox_mAP_m": 0.5328, "bbox_mAP_l": 0.7328, "bbox_mAP_copypaste": "0.6741 0.8393 0.8291 0.0505 0.5328 0.7328", "segm_mAP": 0.7429, "segm_mAP_50": 0.8315, "segm_mAP_75": 0.8315, "segm_mAP_s": 0.0202, "segm_mAP_m": 0.5412, "segm_mAP_l": 0.8181, "segm_mAP_copypaste": "0.7429 0.8315 0.8315 0.0202 0.5412 0.8181"}
{"mode": "val", "epoch": 5, "iter": 13, "lr": 0.00617, "bbox_mAP": 0.6616, "bbox_mAP_50": 0.7925, "bbox_mAP_75": 0.7631, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.4789, "bbox_mAP_l": 0.757, "bbox_mAP_copypaste": "0.6616 0.7925 0.7631 0.0000 0.4789 0.7570", "segm_mAP": 0.6964, "segm_mAP_50": 0.7925, "segm_mAP_75": 0.773, "segm_mAP_s": 0.0, "segm_mAP_m": 0.4853, "segm_mAP_l": 0.8018, "segm_mAP_copypaste": "0.6964 0.7925 0.7730 0.0000 0.4853 0.8018"}
{"mode": "val", "epoch": 6, "iter": 13, "lr": 0.00741, "bbox_mAP": 0.662, "bbox_mAP_50": 0.8377, "bbox_mAP_75": 0.8195, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.4338, "bbox_mAP_l": 0.7518, "bbox_mAP_copypaste": "0.6620 0.8377 0.8195 0.0000 0.4338 0.7518", "segm_mAP": 0.7347, "segm_mAP_50": 0.8195, "segm_mAP_75": 0.8195, "segm_mAP_s": 0.0, "segm_mAP_m": 0.4556, "segm_mAP_l": 0.8395, "segm_mAP_copypaste": "0.7347 0.8195 0.8195 0.0000 0.4556 0.8395"}
{"mode": "val", "epoch": 7, "iter": 13, "lr": 0.00865, "bbox_mAP": 0.6199, "bbox_mAP_50": 0.7728, "bbox_mAP_75": 0.7607, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.4063, "bbox_mAP_l": 0.7077, "bbox_mAP_copypaste": "0.6199 0.7728 0.7607 0.0000 0.4063 0.7077", "segm_mAP": 0.6621, "segm_mAP_50": 0.7565, "segm_mAP_75": 0.7565, "segm_mAP_s": 0.0, "segm_mAP_m": 0.3534, "segm_mAP_l": 0.7603, "segm_mAP_copypaste": "0.6621 0.7565 0.7565 0.0000 0.3534 0.7603"}
{"mode": "val", "epoch": 8, "iter": 13, "lr": 0.00989, "bbox_mAP": 0.6656, "bbox_mAP_50": 0.8284, "bbox_mAP_75": 0.7948, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.4624, "bbox_mAP_l": 0.7518, "bbox_mAP_copypaste": "0.6656 0.8284 0.7948 0.0000 0.4624 0.7518", "segm_mAP": 0.7204, "segm_mAP_50": 0.8153, "segm_mAP_75": 0.7921, "segm_mAP_s": 0.0, "segm_mAP_m": 0.4731, "segm_mAP_l": 0.8126, "segm_mAP_copypaste": "0.7204 0.8153 0.7921 0.0000 0.4731 0.8126"}
{"mode": "val", "epoch": 9, "iter": 13, "lr": 0.00111, "bbox_mAP": 0.6609, "bbox_mAP_50": 0.7914, "bbox_mAP_75": 0.7736, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.3982, "bbox_mAP_l": 0.769, "bbox_mAP_copypaste": "0.6609 0.7914 0.7736 0.0000 0.3982 0.7690", "segm_mAP": 0.7045, "segm_mAP_50": 0.7914, "segm_mAP_75": 0.7558, "segm_mAP_s": 0.0, "segm_mAP_m": 0.4046, "segm_mAP_l": 0.8234, "segm_mAP_copypaste": "0.7045 0.7914 0.7558 0.0000 0.4046 0.8234"}
{"mode": "val", "epoch": 10, "iter": 13, "lr": 0.00124, "bbox_mAP": 0.666, "bbox_mAP_50": 0.7819, "bbox_mAP_75": 0.7589, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.3894, "bbox_mAP_l": 0.7844, "bbox_mAP_copypaste": "0.6660 0.7819 0.7589 0.0000 0.3894 0.7844", "segm_mAP": 0.7053, "segm_mAP_50": 0.7819, "segm_mAP_75": 0.7514, "segm_mAP_s": 0.0, "segm_mAP_m": 0.4009, "segm_mAP_l": 0.8272, "segm_mAP_copypaste": "0.7053 0.7819 0.7514 0.0000 0.4009 0.8272"}
{"mode": "val", "epoch": 11, "iter": 13, "lr": 0.00136, "bbox_mAP": 0.6642, "bbox_mAP_50": 0.7823, "bbox_mAP_75": 0.7399, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.4047, "bbox_mAP_l": 0.7809, "bbox_mAP_copypaste": "0.6642 0.7823 0.7399 0.0000 0.4047 0.7809", "segm_mAP": 0.7022, "segm_mAP_50": 0.7823, "segm_mAP_75": 0.7535, "segm_mAP_s": 0.0, "segm_mAP_m": 0.4152, "segm_mAP_l": 0.8181, "segm_mAP_copypaste": "0.7022 0.7823 0.7535 0.0000 0.4152 0.8181"}
{"mode": "val", "epoch": 12, "iter": 13, "lr": 0.00015, "bbox_mAP": 0.662, "bbox_mAP_50": 0.7756, "bbox_mAP_75": 0.7556, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.392, "bbox_mAP_l": 0.7708, "bbox_mAP_copypaste": "0.6620 0.7756 0.7556 0.0000 0.3920 0.7708", "segm_mAP": 0.7028, "segm_mAP_50": 0.7756, "segm_mAP_75": 0.7535, "segm_mAP_s": 0.0, "segm_mAP_m": 0.4152, "segm_mAP_l": 0.8169, "segm_mAP_copypaste": "0.7028 0.7756 0.7535 0.0000 0.4152 0.8169"}
