{"env_info": "sys.platform: linux\nPython: 3.9.0 (default, Nov 15 2020, 14:28:56) [GCC 7.3.0]\nCUDA available: True\nGPU 0,1,2,3,4,5,6,7: Tesla P100-SXM2-16GB\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 11.3, V11.3.109\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.12.1\nPyTorch compiling details: PyTorch built with:\n  - GCC 9.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.3\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.3.2  (built against CUDA 11.5)\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.3.2, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.12.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.13.1\nOpenCV: 4.7.0\nMMCV: 1.7.1\nMMCV Compiler: GCC 9.3\nMMCV CUDA Compiler: 11.3\nMMSegmentation: 0.30.0+", "seed": 1466149005, "exp_name": "yyh_glomeruli_config.py", "mmseg_version": "0.30.0+", "config": "norm_cfg = dict(type='SyncBN', requires_grad=True)\nmodel = dict(\n    type='EncoderDecoder',\n    pretrained='open-mmlab://resnet50_v1c',\n    backbone=dict(\n        type='ResNetV1c',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        dilations=(1, 1, 2, 4),\n        strides=(1, 2, 1, 1),\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        norm_eval=False,\n        style='pytorch',\n        contract_dilation=True,\n        pretrained='open-mmlab://resnet50_v1c'),\n    decode_head=dict(\n        type='PSPHead',\n        in_channels=2048,\n        in_index=3,\n        channels=512,\n        pool_scales=(1, 2, 3, 6),\n        dropout_ratio=0.1,\n        num_classes=2,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        align_corners=False,\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),\n    auxiliary_head=dict(\n        type='FCNHead',\n        in_channels=1024,\n        in_index=2,\n        channels=256,\n        num_convs=1,\n        concat_input=False,\n        dropout_ratio=0.1,\n        num_classes=2,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        align_corners=False,\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=0.4)),\n    train_cfg=dict(),\n    test_cfg=dict(mode='whole'))\ndataset_type = 'PascalVOCDataset'\ndata_root = '../datasets/Glomeruli-dataset/VOC'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ncrop_size = (512, 512)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations'),\n    dict(type='Resize', img_scale=(2048, 512), ratio_range=(0.5, 2.0)),\n    dict(type='RandomCrop', crop_size=(512, 512), cat_max_ratio=0.75),\n    dict(type='RandomFlip', prob=0.5),\n    dict(type='PhotoMetricDistortion'),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size=(512, 512), pad_val=0, seg_pad_val=255),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(2048, 512),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=8,\n    workers_per_gpu=4,\n    train=dict(\n        type='PascalVOCDataset',\n        data_root='../datasets/Glomeruli-dataset/VOC',\n        img_dir='JPEGImages',\n        ann_dir='SegmentationClass',\n        split='ImageSets/Segmentation/train.txt',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations'),\n            dict(type='Resize', img_scale=(2048, 512), ratio_range=(0.5, 2.0)),\n            dict(type='RandomCrop', crop_size=(512, 512), cat_max_ratio=0.75),\n            dict(type='RandomFlip', prob=0.5),\n            dict(type='PhotoMetricDistortion'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size=(512, 512), pad_val=0, seg_pad_val=255),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n        ]),\n    val=dict(\n        type='PascalVOCDataset',\n        data_root='../datasets/Glomeruli-dataset/VOC',\n        img_dir='JPEGImages',\n        ann_dir='SegmentationClass',\n        split='ImageSets/Segmentation/val.txt',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2048, 512),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='PascalVOCDataset',\n        data_root='../datasets/Glomeruli-dataset/VOC',\n        img_dir='JPEGImages',\n        ann_dir='SegmentationClass',\n        split='ImageSets/Segmentation/val.txt',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2048, 512),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nlog_config = dict(\n    interval=100, hooks=[dict(type='TextLoggerHook', by_epoch=False)])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = 'checkpoints/pspnet_r50b-d8_512x1024_80k_cityscapes_20201225_094315-6344287a.pth'\nresume_from = None\nworkflow = [('train', 1)]\ncudnn_benchmark = True\noptimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0005)\noptimizer_config = dict()\nlr_config = dict(policy='poly', power=0.9, min_lr=0.0001, by_epoch=False)\nrunner = dict(type='IterBasedRunner', max_iters=1000)\ncheckpoint_config = dict(by_epoch=False, interval=500)\nevaluation = dict(interval=200, metric='mIoU', pre_eval=True)\nwork_dir = './work_dirs/yyh_glomeruli_config'\ngpu_ids = range(0, 8)\nauto_resume = False\ndevice = 'cuda'\nseed = 1466149005\n", "CLASSES": ["background", "glomeruli"], "PALETTE": [[0, 0, 0], [1, 1, 1]]}
{"mode": "train", "epoch": 4, "iter": 100, "lr": 0.00911, "memory": 12316, "data_time": 0.11819, "decode.loss_ce": 0.07705, "decode.acc_seg": 97.80793, "aux.loss_ce": 0.04176, "aux.acc_seg": 97.20404, "loss": 0.1188, "time": 1.64825}
{"mode": "train", "epoch": 7, "iter": 200, "lr": 0.00821, "memory": 12316, "data_time": 0.10899, "decode.loss_ce": 0.03517, "decode.acc_seg": 97.95479, "aux.loss_ce": 0.01806, "aux.acc_seg": 97.95479, "loss": 0.05323, "time": 1.52487}
{"mode": "val", "epoch": 7, "iter": 65, "lr": 0.00821, "aAcc": 0.981, "mIoU": 0.4905, "mAcc": 0.5, "IoU.background": 0.981, "IoU.glomeruli": 0.0, "Acc.background": 1.0, "Acc.glomeruli": 0.0}
{"mode": "train", "epoch": 10, "iter": 300, "lr": 0.00729, "memory": 12316, "data_time": 0.2311, "decode.loss_ce": 0.02759, "decode.acc_seg": 98.08054, "aux.loss_ce": 0.01425, "aux.acc_seg": 98.08054, "loss": 0.04184, "time": 1.64615}
{"mode": "train", "epoch": 13, "iter": 400, "lr": 0.00636, "memory": 12316, "data_time": 0.11041, "decode.loss_ce": 0.02321, "decode.acc_seg": 98.02283, "aux.loss_ce": 0.01228, "aux.acc_seg": 98.02283, "loss": 0.03549, "time": 1.52373}
{"mode": "val", "epoch": 13, "iter": 65, "lr": 0.00636, "aAcc": 0.981, "mIoU": 0.4905, "mAcc": 0.5, "IoU.background": 0.981, "IoU.glomeruli": 0.0, "Acc.background": 1.0, "Acc.glomeruli": 0.0}
{"mode": "train", "epoch": 16, "iter": 500, "lr": 0.00541, "memory": 12316, "data_time": 0.17486, "decode.loss_ce": 0.02161, "decode.acc_seg": 97.96812, "aux.loss_ce": 0.01163, "aux.acc_seg": 97.96812, "loss": 0.03325, "time": 1.60936}
{"mode": "train", "epoch": 19, "iter": 600, "lr": 0.00445, "memory": 12316, "data_time": 0.10497, "decode.loss_ce": 0.01891, "decode.acc_seg": 98.49651, "aux.loss_ce": 0.0104, "aux.acc_seg": 98.05848, "loss": 0.02931, "time": 1.52116}
{"mode": "val", "epoch": 19, "iter": 65, "lr": 0.00445, "aAcc": 0.9928, "mIoU": 0.8121, "mAcc": 0.8246, "IoU.background": 0.9927, "IoU.glomeruli": 0.6316, "Acc.background": 0.9994, "Acc.glomeruli": 0.6499}
{"mode": "train", "epoch": 22, "iter": 700, "lr": 0.00346, "memory": 12316, "data_time": 0.18083, "decode.loss_ce": 0.01774, "decode.acc_seg": 99.48805, "aux.loss_ce": 0.00984, "aux.acc_seg": 98.07399, "loss": 0.02758, "time": 1.59569}
{"mode": "train", "epoch": 25, "iter": 800, "lr": 0.00244, "memory": 12316, "data_time": 0.10503, "decode.loss_ce": 0.01726, "decode.acc_seg": 99.56639, "aux.loss_ce": 0.00971, "aux.acc_seg": 97.96927, "loss": 0.02697, "time": 1.52379}
{"mode": "val", "epoch": 25, "iter": 65, "lr": 0.00244, "aAcc": 0.995, "mIoU": 0.8732, "mAcc": 0.8938, "IoU.background": 0.995, "IoU.glomeruli": 0.7515, "Acc.background": 0.999, "Acc.glomeruli": 0.7886}
{"mode": "train", "epoch": 29, "iter": 900, "lr": 0.00136, "memory": 12316, "data_time": 0.21409, "decode.loss_ce": 0.01599, "decode.acc_seg": 99.59249, "aux.loss_ce": 0.00905, "aux.acc_seg": 98.09918, "loss": 0.02504, "time": 1.62921}
{"mode": "train", "epoch": 32, "iter": 1000, "lr": 0.00012, "memory": 12316, "data_time": 0.10588, "decode.loss_ce": 0.01652, "decode.acc_seg": 99.61649, "aux.loss_ce": 0.00943, "aux.acc_seg": 97.95769, "loss": 0.02595, "time": 1.5381}
{"mode": "val", "epoch": 32, "iter": 65, "lr": 0.00012, "aAcc": 0.9953, "mIoU": 0.8797, "mAcc": 0.9021, "IoU.background": 0.9952, "IoU.glomeruli": 0.7642, "Acc.background": 0.999, "Acc.glomeruli": 0.8052}
