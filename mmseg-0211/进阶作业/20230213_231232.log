2023-02-13 23:12:32,981 - mmseg - INFO - Multi-processing start method is `None`
2023-02-13 23:12:32,981 - mmseg - INFO - OpenCV num_threads is `72
2023-02-13 23:12:32,981 - mmseg - INFO - OMP num threads is 1
2023-02-13 23:12:33,034 - mmseg - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.9.0 (default, Nov 15 2020, 14:28:56) [GCC 7.3.0]
CUDA available: True
GPU 0,1,2,3,4,5,6,7: Tesla P100-SXM2-16GB
CUDA_HOME: /usr/local/cuda
NVCC: Cuda compilation tools, release 11.3, V11.3.109
GCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
PyTorch: 1.12.1
PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.3.2  (built against CUDA 11.5)
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.3.2, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.12.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

TorchVision: 0.13.1
OpenCV: 4.7.0
MMCV: 1.7.1
MMCV Compiler: GCC 9.3
MMCV CUDA Compiler: 11.3
MMSegmentation: 0.30.0+
------------------------------------------------------------

2023-02-13 23:12:33,034 - mmseg - INFO - Distributed training: True
2023-02-13 23:12:33,339 - mmseg - INFO - Config:
norm_cfg = dict(type='SyncBN', requires_grad=True)
model = dict(
    type='EncoderDecoder',
    pretrained='open-mmlab://resnet50_v1c',
    backbone=dict(
        type='ResNetV1c',
        depth=50,
        num_stages=4,
        out_indices=(0, 1, 2, 3),
        dilations=(1, 1, 2, 4),
        strides=(1, 2, 1, 1),
        norm_cfg=dict(type='SyncBN', requires_grad=True),
        norm_eval=False,
        style='pytorch',
        contract_dilation=True),
    decode_head=dict(
        type='PSPHead',
        in_channels=2048,
        in_index=3,
        channels=512,
        pool_scales=(1, 2, 3, 6),
        dropout_ratio=0.1,
        num_classes=21,
        norm_cfg=dict(type='SyncBN', requires_grad=True),
        align_corners=False,
        loss_decode=dict(
            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),
    auxiliary_head=dict(
        type='FCNHead',
        in_channels=1024,
        in_index=2,
        channels=256,
        num_convs=1,
        concat_input=False,
        dropout_ratio=0.1,
        num_classes=21,
        norm_cfg=dict(type='SyncBN', requires_grad=True),
        align_corners=False,
        loss_decode=dict(
            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=0.4)),
    train_cfg=dict(),
    test_cfg=dict(mode='whole'))
dataset_type = 'PascalVOCDataset'
data_root = '../datasets/VOCdevkit/VOC2012'
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
crop_size = (512, 512)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadAnnotations'),
    dict(type='Resize', img_scale=(2048, 512), ratio_range=(0.5, 2.0)),
    dict(type='RandomCrop', crop_size=(512, 512), cat_max_ratio=0.75),
    dict(type='RandomFlip', prob=0.5),
    dict(type='PhotoMetricDistortion'),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='Pad', size=(512, 512), pad_val=0, seg_pad_val=255),
    dict(type='DefaultFormatBundle'),
    dict(type='Collect', keys=['img', 'gt_semantic_seg'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        type='MultiScaleFlipAug',
        img_scale=(2048, 512),
        flip=False,
        transforms=[
            dict(type='Resize', keep_ratio=True),
            dict(type='RandomFlip'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ])
]
data = dict(
    samples_per_gpu=8,
    workers_per_gpu=4,
    train=dict(
        type='PascalVOCDataset',
        data_root='../datasets/VOCdevkit/VOC2012',
        img_dir='JPEGImages',
        ann_dir='SegmentationClass',
        split='ImageSets/Segmentation/train.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnnotations'),
            dict(type='Resize', img_scale=(2048, 512), ratio_range=(0.5, 2.0)),
            dict(type='RandomCrop', crop_size=(512, 512), cat_max_ratio=0.75),
            dict(type='RandomFlip', prob=0.5),
            dict(type='PhotoMetricDistortion'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='Pad', size=(512, 512), pad_val=0, seg_pad_val=255),
            dict(type='DefaultFormatBundle'),
            dict(type='Collect', keys=['img', 'gt_semantic_seg'])
        ]),
    val=dict(
        type='PascalVOCDataset',
        data_root='../datasets/VOCdevkit/VOC2012',
        img_dir='JPEGImages',
        ann_dir='SegmentationClass',
        split='ImageSets/Segmentation/val.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(2048, 512),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]),
    test=dict(
        type='PascalVOCDataset',
        data_root='../datasets/VOCdevkit/VOC2012',
        img_dir='JPEGImages',
        ann_dir='SegmentationClass',
        split='ImageSets/Segmentation/val.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(2048, 512),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]))
log_config = dict(
    interval=100, hooks=[dict(type='TextLoggerHook', by_epoch=False)])
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = 'checkpoints/pspnet_r50b-d8_512x1024_80k_cityscapes_20201225_094315-6344287a.pth'
resume_from = None
workflow = [('train', 1)]
cudnn_benchmark = True
optimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0005)
optimizer_config = dict()
lr_config = dict(policy='poly', power=0.9, min_lr=0.0001, by_epoch=False)
runner = dict(type='IterBasedRunner', max_iters=1000)
checkpoint_config = dict(by_epoch=False, interval=500)
evaluation = dict(interval=200, metric='mIoU', pre_eval=True)
work_dir = './work_dirs/yyh_glomeruli_config'
gpu_ids = range(0, 8)
auto_resume = False

2023-02-13 23:12:36,189 - mmseg - INFO - Set random seed to 1791681078, deterministic: False
2023-02-13 23:12:37,060 - mmseg - INFO - EncoderDecoder(
  (backbone): ResNetV1c(
    (stem): Sequential(
      (0): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (1): SyncBatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
      (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (4): SyncBatchNorm(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace=True)
      (6): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace=True)
    )
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): ResLayer(
      (0): Bottleneck(
        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer2): ResLayer(
      (0): Bottleneck(
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn2): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer3): ResLayer(
      (0): Bottleneck(
        (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (5): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
    (layer4): ResLayer(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
        (bn2): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
        (bn2): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
        (bn2): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
    )
  )
  init_cfg={'type': 'Pretrained', 'checkpoint': 'open-mmlab://resnet50_v1c'}
  (decode_head): PSPHead(
    input_transform=None, ignore_index=255, align_corners=False
    (loss_decode): CrossEntropyLoss(avg_non_ignore=False)
    (conv_seg): Conv2d(512, 21, kernel_size=(1, 1), stride=(1, 1))
    (dropout): Dropout2d(p=0.1, inplace=False)
    (psp_modules): PPM(
      (0): Sequential(
        (0): AdaptiveAvgPool2d(output_size=1)
        (1): ConvModule(
          (conv): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
      )
      (1): Sequential(
        (0): AdaptiveAvgPool2d(output_size=2)
        (1): ConvModule(
          (conv): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
      )
      (2): Sequential(
        (0): AdaptiveAvgPool2d(output_size=3)
        (1): ConvModule(
          (conv): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
      )
      (3): Sequential(
        (0): AdaptiveAvgPool2d(output_size=6)
        (1): ConvModule(
          (conv): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (activate): ReLU(inplace=True)
        )
      )
    )
    (bottleneck): ConvModule(
      (conv): Conv2d(4096, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (activate): ReLU(inplace=True)
    )
  )
  init_cfg={'type': 'Normal', 'std': 0.01, 'override': {'name': 'conv_seg'}}
  (auxiliary_head): FCNHead(
    input_transform=None, ignore_index=255, align_corners=False
    (loss_decode): CrossEntropyLoss(avg_non_ignore=False)
    (conv_seg): Conv2d(256, 21, kernel_size=(1, 1), stride=(1, 1))
    (dropout): Dropout2d(p=0.1, inplace=False)
    (convs): Sequential(
      (0): ConvModule(
        (conv): Conv2d(1024, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (activate): ReLU(inplace=True)
      )
    )
  )
  init_cfg={'type': 'Normal', 'std': 0.01, 'override': {'name': 'conv_seg'}}
)
2023-02-13 23:12:37,065 - mmseg - INFO - Loaded 1464 images
2023-02-13 23:12:37,505 - mmseg - INFO - Loaded 1449 images
2023-02-13 23:12:37,506 - mmseg - INFO - load checkpoint from local path: checkpoints/pspnet_r50b-d8_512x1024_80k_cityscapes_20201225_094315-6344287a.pth
2023-02-13 23:12:37,818 - mmseg - WARNING - The model and loaded state dict do not match exactly

size mismatch for decode_head.conv_seg.weight: copying a param with shape torch.Size([19, 512, 1, 1]) from checkpoint, the shape in current model is torch.Size([21, 512, 1, 1]).
size mismatch for decode_head.conv_seg.bias: copying a param with shape torch.Size([19]) from checkpoint, the shape in current model is torch.Size([21]).
size mismatch for auxiliary_head.conv_seg.weight: copying a param with shape torch.Size([19, 256, 1, 1]) from checkpoint, the shape in current model is torch.Size([21, 256, 1, 1]).
size mismatch for auxiliary_head.conv_seg.bias: copying a param with shape torch.Size([19]) from checkpoint, the shape in current model is torch.Size([21]).
unexpected key in source state_dict: backbone.conv1.weight, backbone.bn1.weight, backbone.bn1.bias, backbone.bn1.running_mean, backbone.bn1.running_var, backbone.bn1.num_batches_tracked

missing keys in source state_dict: backbone.stem.0.weight, backbone.stem.1.weight, backbone.stem.1.bias, backbone.stem.1.running_mean, backbone.stem.1.running_var, backbone.stem.3.weight, backbone.stem.4.weight, backbone.stem.4.bias, backbone.stem.4.running_mean, backbone.stem.4.running_var, backbone.stem.6.weight, backbone.stem.7.weight, backbone.stem.7.bias, backbone.stem.7.running_mean, backbone.stem.7.running_var

2023-02-13 23:12:37,821 - mmseg - INFO - Start running, host: yyh@bc, work_dir: /home/yyh/project_python/openmmlab/mmsegmentation-0.30.0/work_dirs/yyh_glomeruli_config
2023-02-13 23:12:37,821 - mmseg - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) PolyLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(LOW         ) DistEvalHook                       
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) PolyLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) DistEvalHook                       
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) PolyLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) DistEvalHook                       
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(LOW         ) IterTimerHook                      
(LOW         ) DistEvalHook                       
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(LOW         ) DistEvalHook                       
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2023-02-13 23:12:37,821 - mmseg - INFO - workflow: [('train', 1)], max: 1000 iters
2023-02-13 23:12:37,821 - mmseg - INFO - Checkpoints will be saved to /home/yyh/project_python/openmmlab/mmsegmentation-0.30.0/work_dirs/yyh_glomeruli_config by HardDiskBackend.
2023-02-13 23:15:38,571 - mmseg - INFO - Iter [100/1000]	lr: 9.113e-03, eta: 0:25:55, time: 1.729, data_time: 0.143, memory: 12316, decode.loss_ce: 1.1921, decode.acc_seg: 65.3433, aux.loss_ce: 0.5420, aux.acc_seg: 63.1346, loss: 1.7340
2023-02-13 23:18:21,777 - mmseg - INFO - Iter [200/1000]	lr: 8.208e-03, eta: 0:22:24, time: 1.632, data_time: 0.162, memory: 12316, decode.loss_ce: 0.7876, decode.acc_seg: 74.5938, aux.loss_ce: 0.4116, aux.acc_seg: 68.2858, loss: 1.1992
2023-02-13 23:19:15,522 - mmseg - INFO - per class results:
2023-02-13 23:19:15,524 - mmseg - INFO - 
+-------------+-------+-------+
|    Class    |  IoU  |  Acc  |
+-------------+-------+-------+
|  background | 85.62 | 96.27 |
|  aeroplane  |  0.0  |  0.0  |
|   bicycle   |  0.0  |  0.0  |
|     bird    |  0.0  |  0.0  |
|     boat    |  0.0  |  0.0  |
|    bottle   |  0.0  |  0.0  |
|     bus     | 66.42 | 72.83 |
|     car     | 56.54 | 75.32 |
|     cat     | 32.54 | 73.91 |
|    chair    |  0.0  |  0.0  |
|     cow     |  0.0  |  0.0  |
| diningtable |  0.0  |  0.0  |
|     dog     | 13.55 | 30.94 |
|    horse    |  0.02 |  0.02 |
|  motorbike  | 24.93 | 26.05 |
|    person   | 53.55 | 86.47 |
| pottedplant |  0.0  |  0.0  |
|    sheep    |  0.0  |  0.0  |
|     sofa    |  0.0  |  0.0  |
|    train    | 46.85 | 53.61 |
|  tvmonitor  |  0.0  |  0.0  |
+-------------+-------+-------+
2023-02-13 23:19:15,524 - mmseg - INFO - Summary:
2023-02-13 23:19:15,524 - mmseg - INFO - 
+-------+------+-------+
|  aAcc | mIoU |  mAcc |
+-------+------+-------+
| 81.06 | 18.1 | 24.54 |
+-------+------+-------+
2023-02-13 23:19:15,524 - mmseg - INFO - Iter(val) [182]	aAcc: 0.8106, mIoU: 0.1810, mAcc: 0.2454, IoU.background: 0.8562, IoU.aeroplane: 0.0000, IoU.bicycle: 0.0000, IoU.bird: 0.0000, IoU.boat: 0.0000, IoU.bottle: 0.0000, IoU.bus: 0.6642, IoU.car: 0.5654, IoU.cat: 0.3254, IoU.chair: 0.0000, IoU.cow: 0.0000, IoU.diningtable: 0.0000, IoU.dog: 0.1355, IoU.horse: 0.0002, IoU.motorbike: 0.2493, IoU.person: 0.5355, IoU.pottedplant: 0.0000, IoU.sheep: 0.0000, IoU.sofa: 0.0000, IoU.train: 0.4685, IoU.tvmonitor: 0.0000, Acc.background: 0.9627, Acc.aeroplane: 0.0000, Acc.bicycle: 0.0000, Acc.bird: 0.0000, Acc.boat: 0.0000, Acc.bottle: 0.0000, Acc.bus: 0.7283, Acc.car: 0.7532, Acc.cat: 0.7391, Acc.chair: 0.0000, Acc.cow: 0.0000, Acc.diningtable: 0.0000, Acc.dog: 0.3094, Acc.horse: 0.0002, Acc.motorbike: 0.2605, Acc.person: 0.8647, Acc.pottedplant: 0.0000, Acc.sheep: 0.0000, Acc.sofa: 0.0000, Acc.train: 0.5361, Acc.tvmonitor: 0.0000
2023-02-13 23:21:56,225 - mmseg - INFO - Iter [300/1000]	lr: 7.291e-03, eta: 0:21:24, time: 2.144, data_time: 0.668, memory: 12316, decode.loss_ce: 0.6311, decode.acc_seg: 78.3008, aux.loss_ce: 0.3771, aux.acc_seg: 70.8139, loss: 1.0082
2023-02-13 23:24:40,123 - mmseg - INFO - Iter [400/1000]	lr: 6.361e-03, eta: 0:17:51, time: 1.639, data_time: 0.159, memory: 12316, decode.loss_ce: 0.5103, decode.acc_seg: 81.9722, aux.loss_ce: 0.3486, aux.acc_seg: 72.5234, loss: 0.8589
2023-02-13 23:24:54,756 - mmseg - INFO - per class results:
2023-02-13 23:24:54,757 - mmseg - INFO - 
+-------------+-------+-------+
|    Class    |  IoU  |  Acc  |
+-------------+-------+-------+
|  background |  88.2 | 95.57 |
|  aeroplane  | 59.27 | 72.42 |
|   bicycle   |  0.0  |  0.0  |
|     bird    |  2.47 |  2.48 |
|     boat    | 21.25 | 24.78 |
|    bottle   |  0.0  |  0.0  |
|     bus     | 72.28 | 76.82 |
|     car     | 66.27 | 71.68 |
|     cat     | 38.48 |  85.6 |
|    chair    |  0.15 |  0.15 |
|     cow     |  12.8 | 13.59 |
| diningtable | 35.87 | 48.89 |
|     dog     |  9.94 | 13.79 |
|    horse    | 13.09 | 14.79 |
|  motorbike  | 55.86 | 79.53 |
|    person   | 66.81 | 80.19 |
| pottedplant |  0.0  |  0.0  |
|    sheep    | 22.64 | 36.42 |
|     sofa    | 22.66 |  51.9 |
|    train    |  52.6 | 86.61 |
|  tvmonitor  | 32.27 | 35.02 |
+-------------+-------+-------+
2023-02-13 23:24:54,757 - mmseg - INFO - Summary:
2023-02-13 23:24:54,757 - mmseg - INFO - 
+-------+-------+-------+
|  aAcc |  mIoU |  mAcc |
+-------+-------+-------+
| 84.15 | 32.04 | 42.39 |
+-------+-------+-------+
2023-02-13 23:24:54,757 - mmseg - INFO - Iter(val) [182]	aAcc: 0.8415, mIoU: 0.3204, mAcc: 0.4239, IoU.background: 0.8820, IoU.aeroplane: 0.5927, IoU.bicycle: 0.0000, IoU.bird: 0.0247, IoU.boat: 0.2125, IoU.bottle: 0.0000, IoU.bus: 0.7228, IoU.car: 0.6627, IoU.cat: 0.3848, IoU.chair: 0.0015, IoU.cow: 0.1280, IoU.diningtable: 0.3587, IoU.dog: 0.0994, IoU.horse: 0.1309, IoU.motorbike: 0.5586, IoU.person: 0.6681, IoU.pottedplant: 0.0000, IoU.sheep: 0.2264, IoU.sofa: 0.2266, IoU.train: 0.5260, IoU.tvmonitor: 0.3227, Acc.background: 0.9557, Acc.aeroplane: 0.7242, Acc.bicycle: 0.0000, Acc.bird: 0.0248, Acc.boat: 0.2478, Acc.bottle: 0.0000, Acc.bus: 0.7682, Acc.car: 0.7168, Acc.cat: 0.8560, Acc.chair: 0.0015, Acc.cow: 0.1359, Acc.diningtable: 0.4889, Acc.dog: 0.1379, Acc.horse: 0.1479, Acc.motorbike: 0.7953, Acc.person: 0.8019, Acc.pottedplant: 0.0000, Acc.sheep: 0.3642, Acc.sofa: 0.5190, Acc.train: 0.8661, Acc.tvmonitor: 0.3502
2023-02-13 23:27:35,503 - mmseg - INFO - Saving checkpoint at 500 iterations
2023-02-13 23:27:36,453 - mmseg - INFO - Iter [500/1000]	lr: 5.415e-03, eta: 0:14:50, time: 1.764, data_time: 0.279, memory: 12316, decode.loss_ce: 0.4205, decode.acc_seg: 84.9699, aux.loss_ce: 0.3258, aux.acc_seg: 73.8470, loss: 0.7463
2023-02-13 23:30:19,977 - mmseg - INFO - Iter [600/1000]	lr: 4.450e-03, eta: 0:11:42, time: 1.635, data_time: 0.158, memory: 12316, decode.loss_ce: 0.3595, decode.acc_seg: 87.1769, aux.loss_ce: 0.3119, aux.acc_seg: 74.9187, loss: 0.6714
2023-02-13 23:30:34,539 - mmseg - INFO - per class results:
2023-02-13 23:30:34,540 - mmseg - INFO - 
+-------------+-------+-------+
|    Class    |  IoU  |  Acc  |
+-------------+-------+-------+
|  background | 89.09 | 96.51 |
|  aeroplane  | 54.76 | 85.93 |
|   bicycle   |  0.0  |  0.0  |
|     bird    | 32.48 |  40.7 |
|     boat    |  34.3 | 48.24 |
|    bottle   |  4.46 |  4.48 |
|     bus     | 75.35 | 80.65 |
|     car     | 71.77 | 82.83 |
|     cat     | 52.21 | 83.77 |
|    chair    |  1.09 |  1.09 |
|     cow     |  7.73 |  8.25 |
| diningtable |  15.3 | 15.77 |
|     dog     | 29.84 | 47.66 |
|    horse    | 22.38 |  35.7 |
|  motorbike  | 54.16 | 83.16 |
|    person   | 66.79 | 87.43 |
| pottedplant |  1.67 |  1.69 |
|    sheep    | 35.79 |  44.8 |
|     sofa    |  7.43 |  7.74 |
|    train    | 55.54 | 84.95 |
|  tvmonitor  | 28.25 | 28.88 |
+-------------+-------+-------+
2023-02-13 23:30:34,541 - mmseg - INFO - Summary:
2023-02-13 23:30:34,541 - mmseg - INFO - 
+-------+-------+------+
|  aAcc |  mIoU | mAcc |
+-------+-------+------+
| 85.91 | 35.26 | 46.2 |
+-------+-------+------+
2023-02-13 23:30:34,541 - mmseg - INFO - Iter(val) [182]	aAcc: 0.8591, mIoU: 0.3526, mAcc: 0.4620, IoU.background: 0.8909, IoU.aeroplane: 0.5476, IoU.bicycle: 0.0000, IoU.bird: 0.3248, IoU.boat: 0.3430, IoU.bottle: 0.0446, IoU.bus: 0.7535, IoU.car: 0.7177, IoU.cat: 0.5221, IoU.chair: 0.0109, IoU.cow: 0.0773, IoU.diningtable: 0.1530, IoU.dog: 0.2984, IoU.horse: 0.2238, IoU.motorbike: 0.5416, IoU.person: 0.6679, IoU.pottedplant: 0.0167, IoU.sheep: 0.3579, IoU.sofa: 0.0743, IoU.train: 0.5554, IoU.tvmonitor: 0.2825, Acc.background: 0.9651, Acc.aeroplane: 0.8593, Acc.bicycle: 0.0000, Acc.bird: 0.4070, Acc.boat: 0.4824, Acc.bottle: 0.0448, Acc.bus: 0.8065, Acc.car: 0.8283, Acc.cat: 0.8377, Acc.chair: 0.0109, Acc.cow: 0.0825, Acc.diningtable: 0.1577, Acc.dog: 0.4766, Acc.horse: 0.3570, Acc.motorbike: 0.8316, Acc.person: 0.8743, Acc.pottedplant: 0.0169, Acc.sheep: 0.4480, Acc.sofa: 0.0774, Acc.train: 0.8495, Acc.tvmonitor: 0.2888
2023-02-13 23:33:14,939 - mmseg - INFO - Iter [700/1000]	lr: 3.460e-03, eta: 0:08:46, time: 1.750, data_time: 0.275, memory: 12316, decode.loss_ce: 0.2909, decode.acc_seg: 89.9666, aux.loss_ce: 0.2975, aux.acc_seg: 75.8114, loss: 0.5884
2023-02-13 23:35:58,624 - mmseg - INFO - Iter [800/1000]	lr: 2.436e-03, eta: 0:05:48, time: 1.637, data_time: 0.155, memory: 12316, decode.loss_ce: 0.2507, decode.acc_seg: 91.4594, aux.loss_ce: 0.2861, aux.acc_seg: 76.4837, loss: 0.5369
2023-02-13 23:36:13,282 - mmseg - INFO - per class results:
2023-02-13 23:36:13,283 - mmseg - INFO - 
+-------------+-------+-------+
|    Class    |  IoU  |  Acc  |
+-------------+-------+-------+
|  background | 89.68 | 94.48 |
|  aeroplane  | 72.78 | 79.63 |
|   bicycle   | 35.02 |  38.0 |
|     bird    | 41.37 | 59.84 |
|     boat    | 44.47 | 53.12 |
|    bottle   | 41.09 | 48.01 |
|     bus     | 80.53 | 86.07 |
|     car     | 79.07 | 85.59 |
|     cat     | 55.57 | 83.01 |
|    chair    |  13.2 | 16.07 |
|     cow     |  3.26 |  3.63 |
| diningtable | 36.58 | 66.67 |
|     dog     | 39.91 | 61.25 |
|    horse    | 29.21 | 54.68 |
|  motorbike  | 65.14 | 77.18 |
|    person   | 65.43 | 93.16 |
| pottedplant | 22.23 | 44.94 |
|    sheep    | 19.33 | 20.48 |
|     sofa    | 31.35 | 39.69 |
|    train    | 64.87 |  69.5 |
|  tvmonitor  | 43.55 |  53.4 |
+-------------+-------+-------+
2023-02-13 23:36:13,283 - mmseg - INFO - Summary:
2023-02-13 23:36:13,283 - mmseg - INFO - 
+-------+-------+------+
|  aAcc |  mIoU | mAcc |
+-------+-------+------+
| 86.96 | 46.36 | 58.5 |
+-------+-------+------+
2023-02-13 23:36:13,284 - mmseg - INFO - Iter(val) [182]	aAcc: 0.8696, mIoU: 0.4636, mAcc: 0.5850, IoU.background: 0.8968, IoU.aeroplane: 0.7278, IoU.bicycle: 0.3502, IoU.bird: 0.4137, IoU.boat: 0.4447, IoU.bottle: 0.4109, IoU.bus: 0.8053, IoU.car: 0.7907, IoU.cat: 0.5557, IoU.chair: 0.1320, IoU.cow: 0.0326, IoU.diningtable: 0.3658, IoU.dog: 0.3991, IoU.horse: 0.2921, IoU.motorbike: 0.6514, IoU.person: 0.6543, IoU.pottedplant: 0.2223, IoU.sheep: 0.1933, IoU.sofa: 0.3135, IoU.train: 0.6487, IoU.tvmonitor: 0.4355, Acc.background: 0.9448, Acc.aeroplane: 0.7963, Acc.bicycle: 0.3800, Acc.bird: 0.5984, Acc.boat: 0.5312, Acc.bottle: 0.4801, Acc.bus: 0.8607, Acc.car: 0.8559, Acc.cat: 0.8301, Acc.chair: 0.1607, Acc.cow: 0.0363, Acc.diningtable: 0.6667, Acc.dog: 0.6125, Acc.horse: 0.5468, Acc.motorbike: 0.7718, Acc.person: 0.9316, Acc.pottedplant: 0.4494, Acc.sheep: 0.2048, Acc.sofa: 0.3969, Acc.train: 0.6950, Acc.tvmonitor: 0.5340
2023-02-13 23:38:54,074 - mmseg - INFO - Iter [900/1000]	lr: 1.358e-03, eta: 0:02:54, time: 1.754, data_time: 0.271, memory: 12316, decode.loss_ce: 0.2203, decode.acc_seg: 92.8335, aux.loss_ce: 0.2776, aux.acc_seg: 76.7615, loss: 0.4979
2023-02-13 23:41:37,859 - mmseg - INFO - Saving checkpoint at 1000 iterations
2023-02-13 23:41:38,848 - mmseg - INFO - Exp name: yyh_glomeruli_config.py
2023-02-13 23:41:38,848 - mmseg - INFO - Iter [1000/1000]	lr: 1.198e-04, eta: 0:00:00, time: 1.648, data_time: 0.158, memory: 12316, decode.loss_ce: 0.1865, decode.acc_seg: 94.1455, aux.loss_ce: 0.2654, aux.acc_seg: 77.7809, loss: 0.4518
2023-02-13 23:41:53,261 - mmseg - INFO - per class results:
2023-02-13 23:41:53,262 - mmseg - INFO - 
+-------------+-------+-------+
|    Class    |  IoU  |  Acc  |
+-------------+-------+-------+
|  background | 91.14 | 97.17 |
|  aeroplane  | 73.79 | 82.08 |
|   bicycle   | 33.87 | 35.89 |
|     bird    | 48.22 | 64.42 |
|     boat    | 44.36 | 50.92 |
|    bottle   | 42.05 | 46.82 |
|     bus     | 81.59 | 84.62 |
|     car     | 79.28 | 82.73 |
|     cat     | 66.16 | 84.55 |
|    chair    | 15.39 | 21.46 |
|     cow     | 26.64 | 29.57 |
| diningtable | 40.05 |  45.3 |
|     dog     | 49.29 | 68.93 |
|    horse    | 35.12 | 49.95 |
|  motorbike  | 68.62 | 82.08 |
|    person   | 72.64 | 89.51 |
| pottedplant | 28.03 | 34.73 |
|    sheep    | 57.76 | 68.55 |
|     sofa    |  30.9 | 37.75 |
|    train    | 73.01 | 81.44 |
|  tvmonitor  | 49.74 | 59.61 |
+-------------+-------+-------+
2023-02-13 23:41:53,262 - mmseg - INFO - Summary:
2023-02-13 23:41:53,262 - mmseg - INFO - 
+-------+-------+-------+
|  aAcc |  mIoU |  mAcc |
+-------+-------+-------+
| 89.54 | 52.75 | 61.81 |
+-------+-------+-------+
2023-02-13 23:41:53,262 - mmseg - INFO - Exp name: yyh_glomeruli_config.py
2023-02-13 23:41:53,263 - mmseg - INFO - Iter(val) [182]	aAcc: 0.8954, mIoU: 0.5275, mAcc: 0.6181, IoU.background: 0.9114, IoU.aeroplane: 0.7379, IoU.bicycle: 0.3387, IoU.bird: 0.4822, IoU.boat: 0.4436, IoU.bottle: 0.4205, IoU.bus: 0.8159, IoU.car: 0.7928, IoU.cat: 0.6616, IoU.chair: 0.1539, IoU.cow: 0.2664, IoU.diningtable: 0.4005, IoU.dog: 0.4929, IoU.horse: 0.3512, IoU.motorbike: 0.6862, IoU.person: 0.7264, IoU.pottedplant: 0.2803, IoU.sheep: 0.5776, IoU.sofa: 0.3090, IoU.train: 0.7301, IoU.tvmonitor: 0.4974, Acc.background: 0.9717, Acc.aeroplane: 0.8208, Acc.bicycle: 0.3589, Acc.bird: 0.6442, Acc.boat: 0.5092, Acc.bottle: 0.4682, Acc.bus: 0.8462, Acc.car: 0.8273, Acc.cat: 0.8455, Acc.chair: 0.2146, Acc.cow: 0.2957, Acc.diningtable: 0.4530, Acc.dog: 0.6893, Acc.horse: 0.4995, Acc.motorbike: 0.8208, Acc.person: 0.8951, Acc.pottedplant: 0.3473, Acc.sheep: 0.6855, Acc.sofa: 0.3775, Acc.train: 0.8144, Acc.tvmonitor: 0.5961
