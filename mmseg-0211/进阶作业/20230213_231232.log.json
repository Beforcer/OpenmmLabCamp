{"env_info": "sys.platform: linux\nPython: 3.9.0 (default, Nov 15 2020, 14:28:56) [GCC 7.3.0]\nCUDA available: True\nGPU 0,1,2,3,4,5,6,7: Tesla P100-SXM2-16GB\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 11.3, V11.3.109\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.12.1\nPyTorch compiling details: PyTorch built with:\n  - GCC 9.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.3\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.3.2  (built against CUDA 11.5)\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.3.2, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.12.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.13.1\nOpenCV: 4.7.0\nMMCV: 1.7.1\nMMCV Compiler: GCC 9.3\nMMCV CUDA Compiler: 11.3\nMMSegmentation: 0.30.0+", "seed": 1791681078, "exp_name": "yyh_glomeruli_config.py", "mmseg_version": "0.30.0+", "config": "norm_cfg = dict(type='SyncBN', requires_grad=True)\nmodel = dict(\n    type='EncoderDecoder',\n    pretrained='open-mmlab://resnet50_v1c',\n    backbone=dict(\n        type='ResNetV1c',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        dilations=(1, 1, 2, 4),\n        strides=(1, 2, 1, 1),\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        norm_eval=False,\n        style='pytorch',\n        contract_dilation=True,\n        pretrained='open-mmlab://resnet50_v1c'),\n    decode_head=dict(\n        type='PSPHead',\n        in_channels=2048,\n        in_index=3,\n        channels=512,\n        pool_scales=(1, 2, 3, 6),\n        dropout_ratio=0.1,\n        num_classes=21,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        align_corners=False,\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),\n    auxiliary_head=dict(\n        type='FCNHead',\n        in_channels=1024,\n        in_index=2,\n        channels=256,\n        num_convs=1,\n        concat_input=False,\n        dropout_ratio=0.1,\n        num_classes=21,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        align_corners=False,\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=0.4)),\n    train_cfg=dict(),\n    test_cfg=dict(mode='whole'))\ndataset_type = 'PascalVOCDataset'\ndata_root = '../datasets/VOCdevkit/VOC2012'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ncrop_size = (512, 512)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations'),\n    dict(type='Resize', img_scale=(2048, 512), ratio_range=(0.5, 2.0)),\n    dict(type='RandomCrop', crop_size=(512, 512), cat_max_ratio=0.75),\n    dict(type='RandomFlip', prob=0.5),\n    dict(type='PhotoMetricDistortion'),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size=(512, 512), pad_val=0, seg_pad_val=255),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(2048, 512),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=8,\n    workers_per_gpu=4,\n    train=dict(\n        type='PascalVOCDataset',\n        data_root='../datasets/VOCdevkit/VOC2012',\n        img_dir='JPEGImages',\n        ann_dir='SegmentationClass',\n        split='ImageSets/Segmentation/train.txt',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations'),\n            dict(type='Resize', img_scale=(2048, 512), ratio_range=(0.5, 2.0)),\n            dict(type='RandomCrop', crop_size=(512, 512), cat_max_ratio=0.75),\n            dict(type='RandomFlip', prob=0.5),\n            dict(type='PhotoMetricDistortion'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size=(512, 512), pad_val=0, seg_pad_val=255),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n        ]),\n    val=dict(\n        type='PascalVOCDataset',\n        data_root='../datasets/VOCdevkit/VOC2012',\n        img_dir='JPEGImages',\n        ann_dir='SegmentationClass',\n        split='ImageSets/Segmentation/val.txt',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2048, 512),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='PascalVOCDataset',\n        data_root='../datasets/VOCdevkit/VOC2012',\n        img_dir='JPEGImages',\n        ann_dir='SegmentationClass',\n        split='ImageSets/Segmentation/val.txt',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2048, 512),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nlog_config = dict(\n    interval=100, hooks=[dict(type='TextLoggerHook', by_epoch=False)])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = 'checkpoints/pspnet_r50b-d8_512x1024_80k_cityscapes_20201225_094315-6344287a.pth'\nresume_from = None\nworkflow = [('train', 1)]\ncudnn_benchmark = True\noptimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0005)\noptimizer_config = dict()\nlr_config = dict(policy='poly', power=0.9, min_lr=0.0001, by_epoch=False)\nrunner = dict(type='IterBasedRunner', max_iters=1000)\ncheckpoint_config = dict(by_epoch=False, interval=500)\nevaluation = dict(interval=200, metric='mIoU', pre_eval=True)\nwork_dir = './work_dirs/yyh_glomeruli_config'\ngpu_ids = range(0, 8)\nauto_resume = False\ndevice = 'cuda'\nseed = 1791681078\n", "CLASSES": ["background", "aeroplane", "bicycle", "bird", "boat", "bottle", "bus", "car", "cat", "chair", "cow", "diningtable", "dog", "horse", "motorbike", "person", "pottedplant", "sheep", "sofa", "train", "tvmonitor"], "PALETTE": [[0, 0, 0], [128, 0, 0], [0, 128, 0], [128, 128, 0], [0, 0, 128], [128, 0, 128], [0, 128, 128], [128, 128, 128], [64, 0, 0], [192, 0, 0], [64, 128, 0], [192, 128, 0], [64, 0, 128], [192, 0, 128], [64, 128, 128], [192, 128, 128], [0, 64, 0], [128, 64, 0], [0, 192, 0], [128, 192, 0], [0, 64, 128]]}
{"mode": "train", "epoch": 5, "iter": 100, "lr": 0.00911, "memory": 12316, "data_time": 0.14273, "decode.loss_ce": 1.19207, "decode.acc_seg": 65.3433, "aux.loss_ce": 0.54198, "aux.acc_seg": 63.13457, "loss": 1.73405, "time": 1.72866}
{"mode": "train", "epoch": 10, "iter": 200, "lr": 0.00821, "memory": 12316, "data_time": 0.16223, "decode.loss_ce": 0.78762, "decode.acc_seg": 74.59382, "aux.loss_ce": 0.41161, "aux.acc_seg": 68.28584, "loss": 1.19923, "time": 1.63204}
{"mode": "val", "epoch": 10, "iter": 182, "lr": 0.00821, "aAcc": 0.8106, "mIoU": 0.181, "mAcc": 0.2454, "IoU.background": 0.8562, "IoU.aeroplane": 0.0, "IoU.bicycle": 0.0, "IoU.bird": 0.0, "IoU.boat": 0.0, "IoU.bottle": 0.0, "IoU.bus": 0.6642, "IoU.car": 0.5654, "IoU.cat": 0.3254, "IoU.chair": 0.0, "IoU.cow": 0.0, "IoU.diningtable": 0.0, "IoU.dog": 0.1355, "IoU.horse": 0.0002, "IoU.motorbike": 0.2493, "IoU.person": 0.5355, "IoU.pottedplant": 0.0, "IoU.sheep": 0.0, "IoU.sofa": 0.0, "IoU.train": 0.4685, "IoU.tvmonitor": 0.0, "Acc.background": 0.9627, "Acc.aeroplane": 0.0, "Acc.bicycle": 0.0, "Acc.bird": 0.0, "Acc.boat": 0.0, "Acc.bottle": 0.0, "Acc.bus": 0.7283, "Acc.car": 0.7532, "Acc.cat": 0.7391, "Acc.chair": 0.0, "Acc.cow": 0.0, "Acc.diningtable": 0.0, "Acc.dog": 0.3094, "Acc.horse": 0.0002, "Acc.motorbike": 0.2605, "Acc.person": 0.8647, "Acc.pottedplant": 0.0, "Acc.sheep": 0.0, "Acc.sofa": 0.0, "Acc.train": 0.5361, "Acc.tvmonitor": 0.0}
{"mode": "train", "epoch": 14, "iter": 300, "lr": 0.00729, "memory": 12316, "data_time": 0.6679, "decode.loss_ce": 0.63107, "decode.acc_seg": 78.30079, "aux.loss_ce": 0.37708, "aux.acc_seg": 70.81387, "loss": 1.00816, "time": 2.14447}
{"mode": "train", "epoch": 19, "iter": 400, "lr": 0.00636, "memory": 12316, "data_time": 0.15911, "decode.loss_ce": 0.51027, "decode.acc_seg": 81.97217, "aux.loss_ce": 0.34863, "aux.acc_seg": 72.52342, "loss": 0.8589, "time": 1.63897}
{"mode": "val", "epoch": 19, "iter": 182, "lr": 0.00636, "aAcc": 0.8415, "mIoU": 0.3204, "mAcc": 0.4239, "IoU.background": 0.882, "IoU.aeroplane": 0.5927, "IoU.bicycle": 0.0, "IoU.bird": 0.0247, "IoU.boat": 0.2125, "IoU.bottle": 0.0, "IoU.bus": 0.7228, "IoU.car": 0.6627, "IoU.cat": 0.3848, "IoU.chair": 0.0015, "IoU.cow": 0.128, "IoU.diningtable": 0.3587, "IoU.dog": 0.0994, "IoU.horse": 0.1309, "IoU.motorbike": 0.5586, "IoU.person": 0.6681, "IoU.pottedplant": 0.0, "IoU.sheep": 0.2264, "IoU.sofa": 0.2266, "IoU.train": 0.526, "IoU.tvmonitor": 0.3227, "Acc.background": 0.9557, "Acc.aeroplane": 0.7242, "Acc.bicycle": 0.0, "Acc.bird": 0.0248, "Acc.boat": 0.2478, "Acc.bottle": 0.0, "Acc.bus": 0.7682, "Acc.car": 0.7168, "Acc.cat": 0.856, "Acc.chair": 0.0015, "Acc.cow": 0.1359, "Acc.diningtable": 0.4889, "Acc.dog": 0.1379, "Acc.horse": 0.1479, "Acc.motorbike": 0.7953, "Acc.person": 0.8019, "Acc.pottedplant": 0.0, "Acc.sheep": 0.3642, "Acc.sofa": 0.519, "Acc.train": 0.8661, "Acc.tvmonitor": 0.3502}
{"mode": "train", "epoch": 23, "iter": 500, "lr": 0.00541, "memory": 12316, "data_time": 0.27894, "decode.loss_ce": 0.42053, "decode.acc_seg": 84.96993, "aux.loss_ce": 0.32578, "aux.acc_seg": 73.847, "loss": 0.74631, "time": 1.7636}
{"mode": "train", "epoch": 28, "iter": 600, "lr": 0.00445, "memory": 12316, "data_time": 0.15778, "decode.loss_ce": 0.35948, "decode.acc_seg": 87.17694, "aux.loss_ce": 0.31188, "aux.acc_seg": 74.91868, "loss": 0.67137, "time": 1.63491}
{"mode": "val", "epoch": 28, "iter": 182, "lr": 0.00445, "aAcc": 0.8591, "mIoU": 0.3526, "mAcc": 0.462, "IoU.background": 0.8909, "IoU.aeroplane": 0.5476, "IoU.bicycle": 0.0, "IoU.bird": 0.3248, "IoU.boat": 0.343, "IoU.bottle": 0.0446, "IoU.bus": 0.7535, "IoU.car": 0.7177, "IoU.cat": 0.5221, "IoU.chair": 0.0109, "IoU.cow": 0.0773, "IoU.diningtable": 0.153, "IoU.dog": 0.2984, "IoU.horse": 0.2238, "IoU.motorbike": 0.5416, "IoU.person": 0.6679, "IoU.pottedplant": 0.0167, "IoU.sheep": 0.3579, "IoU.sofa": 0.0743, "IoU.train": 0.5554, "IoU.tvmonitor": 0.2825, "Acc.background": 0.9651, "Acc.aeroplane": 0.8593, "Acc.bicycle": 0.0, "Acc.bird": 0.407, "Acc.boat": 0.4824, "Acc.bottle": 0.0448, "Acc.bus": 0.8065, "Acc.car": 0.8283, "Acc.cat": 0.8377, "Acc.chair": 0.0109, "Acc.cow": 0.0825, "Acc.diningtable": 0.1577, "Acc.dog": 0.4766, "Acc.horse": 0.357, "Acc.motorbike": 0.8316, "Acc.person": 0.8743, "Acc.pottedplant": 0.0169, "Acc.sheep": 0.448, "Acc.sofa": 0.0774, "Acc.train": 0.8495, "Acc.tvmonitor": 0.2888}
{"mode": "train", "epoch": 32, "iter": 700, "lr": 0.00346, "memory": 12316, "data_time": 0.27458, "decode.loss_ce": 0.2909, "decode.acc_seg": 89.96661, "aux.loss_ce": 0.29747, "aux.acc_seg": 75.81142, "loss": 0.58837, "time": 1.74961}
{"mode": "train", "epoch": 37, "iter": 800, "lr": 0.00244, "memory": 12316, "data_time": 0.15506, "decode.loss_ce": 0.25074, "decode.acc_seg": 91.45937, "aux.loss_ce": 0.28612, "aux.acc_seg": 76.48367, "loss": 0.53687, "time": 1.63683}
{"mode": "val", "epoch": 37, "iter": 182, "lr": 0.00244, "aAcc": 0.8696, "mIoU": 0.4636, "mAcc": 0.585, "IoU.background": 0.8968, "IoU.aeroplane": 0.7278, "IoU.bicycle": 0.3502, "IoU.bird": 0.4137, "IoU.boat": 0.4447, "IoU.bottle": 0.4109, "IoU.bus": 0.8053, "IoU.car": 0.7907, "IoU.cat": 0.5557, "IoU.chair": 0.132, "IoU.cow": 0.0326, "IoU.diningtable": 0.3658, "IoU.dog": 0.3991, "IoU.horse": 0.2921, "IoU.motorbike": 0.6514, "IoU.person": 0.6543, "IoU.pottedplant": 0.2223, "IoU.sheep": 0.1933, "IoU.sofa": 0.3135, "IoU.train": 0.6487, "IoU.tvmonitor": 0.4355, "Acc.background": 0.9448, "Acc.aeroplane": 0.7963, "Acc.bicycle": 0.38, "Acc.bird": 0.5984, "Acc.boat": 0.5312, "Acc.bottle": 0.4801, "Acc.bus": 0.8607, "Acc.car": 0.8559, "Acc.cat": 0.8301, "Acc.chair": 0.1607, "Acc.cow": 0.0363, "Acc.diningtable": 0.6667, "Acc.dog": 0.6125, "Acc.horse": 0.5468, "Acc.motorbike": 0.7718, "Acc.person": 0.9316, "Acc.pottedplant": 0.4494, "Acc.sheep": 0.2048, "Acc.sofa": 0.3969, "Acc.train": 0.695, "Acc.tvmonitor": 0.534}
{"mode": "train", "epoch": 41, "iter": 900, "lr": 0.00136, "memory": 12316, "data_time": 0.2712, "decode.loss_ce": 0.22025, "decode.acc_seg": 92.83355, "aux.loss_ce": 0.27762, "aux.acc_seg": 76.76153, "loss": 0.49787, "time": 1.7545}
{"mode": "train", "epoch": 46, "iter": 1000, "lr": 0.00012, "memory": 12316, "data_time": 0.15767, "decode.loss_ce": 0.18646, "decode.acc_seg": 94.14549, "aux.loss_ce": 0.26539, "aux.acc_seg": 77.78088, "loss": 0.45185, "time": 1.64804}
{"mode": "val", "epoch": 46, "iter": 182, "lr": 0.00012, "aAcc": 0.8954, "mIoU": 0.5275, "mAcc": 0.6181, "IoU.background": 0.9114, "IoU.aeroplane": 0.7379, "IoU.bicycle": 0.3387, "IoU.bird": 0.4822, "IoU.boat": 0.4436, "IoU.bottle": 0.4205, "IoU.bus": 0.8159, "IoU.car": 0.7928, "IoU.cat": 0.6616, "IoU.chair": 0.1539, "IoU.cow": 0.2664, "IoU.diningtable": 0.4005, "IoU.dog": 0.4929, "IoU.horse": 0.3512, "IoU.motorbike": 0.6862, "IoU.person": 0.7264, "IoU.pottedplant": 0.2803, "IoU.sheep": 0.5776, "IoU.sofa": 0.309, "IoU.train": 0.7301, "IoU.tvmonitor": 0.4974, "Acc.background": 0.9717, "Acc.aeroplane": 0.8208, "Acc.bicycle": 0.3589, "Acc.bird": 0.6442, "Acc.boat": 0.5092, "Acc.bottle": 0.4682, "Acc.bus": 0.8462, "Acc.car": 0.8273, "Acc.cat": 0.8455, "Acc.chair": 0.2146, "Acc.cow": 0.2957, "Acc.diningtable": 0.453, "Acc.dog": 0.6893, "Acc.horse": 0.4995, "Acc.motorbike": 0.8208, "Acc.person": 0.8951, "Acc.pottedplant": 0.3473, "Acc.sheep": 0.6855, "Acc.sofa": 0.3775, "Acc.train": 0.8144, "Acc.tvmonitor": 0.5961}
