{"env_info": "sys.platform: linux\nPython: 3.9.0 (default, Nov 15 2020, 14:28:56) [GCC 7.3.0]\nCUDA available: True\nGPU 0,1,2,3,4,5,6,7: Tesla P100-SXM2-16GB\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 11.3, V11.3.109\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.12.1\nPyTorch compiling details: PyTorch built with:\n  - GCC 9.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.3\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.3.2  (built against CUDA 11.5)\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.3.2, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.12.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.13.1\nOpenCV: 4.7.0\nMMCV: 1.7.1\nMMCV Compiler: GCC 9.3\nMMCV CUDA Compiler: 11.3\nMMDetection: 2.28.1+", "config": "model = dict(\n    type='FasterRCNN',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=None),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    roi_head=dict(\n        type='StandardRoIHead',\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCBBoxHead',\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=20,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=False,\n            loss_cls=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n            loss_bbox=dict(type='L1Loss', loss_weight=1.0))),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=-1,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.5,\n                neg_iou_thr=0.5,\n                min_pos_iou=0.5,\n                match_low_quality=False,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=512,\n                pos_fraction=0.25,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=True),\n            pos_weight=-1,\n            debug=False)),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100)))\ndataset_type = 'VOCDataset'\ndata_root = '../datasets/VOCdevkit/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Resize', img_scale=(1000, 600), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1000, 600),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=8,\n    workers_per_gpu=2,\n    train=dict(\n        type='RepeatDataset',\n        times=3,\n        dataset=dict(\n            type='VOCDataset',\n            ann_file=[\n                '../datasets/VOCdevkit/VOC2007/ImageSets/Main/train.txt',\n                '../datasets/VOCdevkit/VOC2012/ImageSets/Main/train.txt'\n            ],\n            img_prefix=[\n                '../datasets/VOCdevkit/VOC2007/',\n                '../datasets/VOCdevkit/VOC2012/'\n            ],\n            pipeline=[\n                dict(type='LoadImageFromFile'),\n                dict(type='LoadAnnotations', with_bbox=True),\n                dict(type='Resize', img_scale=(1000, 600), keep_ratio=True),\n                dict(type='RandomFlip', flip_ratio=0.5),\n                dict(\n                    type='Normalize',\n                    mean=[123.675, 116.28, 103.53],\n                    std=[58.395, 57.12, 57.375],\n                    to_rgb=True),\n                dict(type='Pad', size_divisor=32),\n                dict(type='DefaultFormatBundle'),\n                dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n            ])),\n    val=dict(\n        type='VOCDataset',\n        ann_file='../datasets/VOCdevkit/VOC2007/ImageSets/Main/val.txt',\n        img_prefix='../datasets/VOCdevkit/VOC2007/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1000, 600),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='VOCDataset',\n        ann_file='../datasets/VOCdevkit/VOC2007/ImageSets/Main/val.txt',\n        img_prefix='../datasets/VOCdevkit/VOC2007/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1000, 600),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(interval=1, metric='mAP')\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = 'checkpoints/faster_rcnn_r50_fpn_1x_voc0712_20220320_192712-54bef0f3.pth'\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=16)\noptimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(policy='step', step=[3])\nrunner = dict(type='EpochBasedRunner', max_epochs=4)\nwork_dir = './work_dirs/yyh_voc2012_config'\nauto_resume = False\ngpu_ids = range(0, 8)\n", "seed": 615978859, "exp_name": "yyh_voc2012_config.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.01, "memory": 8269, "data_time": 0.06822, "loss_rpn_cls": 0.00575, "loss_rpn_bbox": 0.01128, "loss_cls": 0.07867, "acc": 96.92578, "loss_bbox": 0.13285, "loss": 0.22856, "time": 0.91784}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.01, "memory": 8269, "data_time": 0.01975, "loss_rpn_cls": 0.00592, "loss_rpn_bbox": 0.01179, "loss_cls": 0.07865, "acc": 96.94714, "loss_bbox": 0.13302, "loss": 0.22938, "time": 0.83698}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.01, "memory": 8269, "data_time": 0.01932, "loss_rpn_cls": 0.00554, "loss_rpn_bbox": 0.01139, "loss_cls": 0.07499, "acc": 97.0683, "loss_bbox": 0.12939, "loss": 0.2213, "time": 0.83852}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.01, "memory": 8269, "data_time": 0.02125, "loss_rpn_cls": 0.00542, "loss_rpn_bbox": 0.01187, "loss_cls": 0.07705, "acc": 96.98822, "loss_bbox": 0.13378, "loss": 0.22811, "time": 0.83787}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.01, "memory": 8269, "data_time": 0.02082, "loss_rpn_cls": 0.00534, "loss_rpn_bbox": 0.01132, "loss_cls": 0.07286, "acc": 97.14795, "loss_bbox": 0.12621, "loss": 0.21573, "time": 0.84338}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.01, "memory": 8269, "data_time": 0.02184, "loss_rpn_cls": 0.00528, "loss_rpn_bbox": 0.01126, "loss_cls": 0.07426, "acc": 97.09271, "loss_bbox": 0.12839, "loss": 0.21919, "time": 0.83757}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.01, "memory": 8269, "data_time": 0.02146, "loss_rpn_cls": 0.00513, "loss_rpn_bbox": 0.01169, "loss_cls": 0.07421, "acc": 97.08606, "loss_bbox": 0.12905, "loss": 0.22007, "time": 0.83936}
{"mode": "val", "epoch": 1, "iter": 314, "lr": 0.01, "mAP": 0.89574, "AP50": 0.896}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 0.01, "memory": 8269, "data_time": 0.06107, "loss_rpn_cls": 0.00469, "loss_rpn_bbox": 0.01134, "loss_cls": 0.07038, "acc": 97.2323, "loss_bbox": 0.12556, "loss": 0.21197, "time": 0.88439}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 0.01, "memory": 8269, "data_time": 0.01722, "loss_rpn_cls": 0.00496, "loss_rpn_bbox": 0.0115, "loss_cls": 0.07107, "acc": 97.1806, "loss_bbox": 0.12627, "loss": 0.21381, "time": 0.83259}
{"mode": "train", "epoch": 2, "iter": 150, "lr": 0.01, "memory": 8269, "data_time": 0.01682, "loss_rpn_cls": 0.00469, "loss_rpn_bbox": 0.01092, "loss_cls": 0.06967, "acc": 97.26318, "loss_bbox": 0.12392, "loss": 0.20921, "time": 0.83442}
{"mode": "train", "epoch": 2, "iter": 200, "lr": 0.01, "memory": 8269, "data_time": 0.01663, "loss_rpn_cls": 0.0047, "loss_rpn_bbox": 0.01103, "loss_cls": 0.06771, "acc": 97.34113, "loss_bbox": 0.11873, "loss": 0.20218, "time": 0.83916}
{"mode": "train", "epoch": 2, "iter": 250, "lr": 0.01, "memory": 8269, "data_time": 0.01716, "loss_rpn_cls": 0.00455, "loss_rpn_bbox": 0.01092, "loss_cls": 0.068, "acc": 97.33698, "loss_bbox": 0.12056, "loss": 0.20402, "time": 0.84034}
{"mode": "train", "epoch": 2, "iter": 300, "lr": 0.01, "memory": 8269, "data_time": 0.0173, "loss_rpn_cls": 0.0045, "loss_rpn_bbox": 0.01075, "loss_cls": 0.0676, "acc": 97.34515, "loss_bbox": 0.12116, "loss": 0.204, "time": 0.84139}
{"mode": "train", "epoch": 2, "iter": 350, "lr": 0.01, "memory": 8269, "data_time": 0.01662, "loss_rpn_cls": 0.00463, "loss_rpn_bbox": 0.01104, "loss_cls": 0.0679, "acc": 97.32819, "loss_bbox": 0.12225, "loss": 0.20582, "time": 0.83997}
{"mode": "val", "epoch": 2, "iter": 314, "lr": 0.01, "mAP": 0.89329, "AP50": 0.893}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 0.01, "memory": 8269, "data_time": 0.06167, "loss_rpn_cls": 0.00425, "loss_rpn_bbox": 0.01106, "loss_cls": 0.06431, "acc": 97.46515, "loss_bbox": 0.11737, "loss": 0.19699, "time": 0.88305}
{"mode": "train", "epoch": 3, "iter": 100, "lr": 0.01, "memory": 8269, "data_time": 0.01768, "loss_rpn_cls": 0.00405, "loss_rpn_bbox": 0.01052, "loss_cls": 0.06296, "acc": 97.49927, "loss_bbox": 0.11416, "loss": 0.1917, "time": 0.83377}
{"mode": "train", "epoch": 3, "iter": 150, "lr": 0.01, "memory": 8269, "data_time": 0.0168, "loss_rpn_cls": 0.00394, "loss_rpn_bbox": 0.01058, "loss_cls": 0.0615, "acc": 97.5719, "loss_bbox": 0.11254, "loss": 0.18855, "time": 0.83856}
{"mode": "train", "epoch": 3, "iter": 200, "lr": 0.01, "memory": 8269, "data_time": 0.01769, "loss_rpn_cls": 0.00395, "loss_rpn_bbox": 0.01094, "loss_cls": 0.06419, "acc": 97.46649, "loss_bbox": 0.11703, "loss": 0.19611, "time": 0.83995}
{"mode": "train", "epoch": 3, "iter": 250, "lr": 0.01, "memory": 8269, "data_time": 0.0175, "loss_rpn_cls": 0.00392, "loss_rpn_bbox": 0.01028, "loss_cls": 0.06167, "acc": 97.54706, "loss_bbox": 0.11268, "loss": 0.18855, "time": 0.84126}
{"mode": "train", "epoch": 3, "iter": 300, "lr": 0.01, "memory": 8269, "data_time": 0.01698, "loss_rpn_cls": 0.0038, "loss_rpn_bbox": 0.0104, "loss_cls": 0.06108, "acc": 97.56641, "loss_bbox": 0.1127, "loss": 0.18799, "time": 0.83433}
{"mode": "train", "epoch": 3, "iter": 350, "lr": 0.01, "memory": 8269, "data_time": 0.01824, "loss_rpn_cls": 0.00384, "loss_rpn_bbox": 0.01038, "loss_cls": 0.06168, "acc": 97.55328, "loss_bbox": 0.11351, "loss": 0.18942, "time": 0.83818}
{"mode": "val", "epoch": 3, "iter": 314, "lr": 0.01, "mAP": 0.88821, "AP50": 0.888}
{"mode": "train", "epoch": 4, "iter": 50, "lr": 0.001, "memory": 8269, "data_time": 0.06261, "loss_rpn_cls": 0.00383, "loss_rpn_bbox": 0.01034, "loss_cls": 0.05826, "acc": 97.6936, "loss_bbox": 0.10864, "loss": 0.18108, "time": 0.88433}
{"mode": "train", "epoch": 4, "iter": 100, "lr": 0.001, "memory": 8269, "data_time": 0.01664, "loss_rpn_cls": 0.00338, "loss_rpn_bbox": 0.01008, "loss_cls": 0.05568, "acc": 97.78741, "loss_bbox": 0.10361, "loss": 0.17274, "time": 0.8378}
{"mode": "train", "epoch": 4, "iter": 150, "lr": 0.001, "memory": 8269, "data_time": 0.01811, "loss_rpn_cls": 0.00345, "loss_rpn_bbox": 0.00995, "loss_cls": 0.05569, "acc": 97.78638, "loss_bbox": 0.10468, "loss": 0.17378, "time": 0.83573}
{"mode": "train", "epoch": 4, "iter": 200, "lr": 0.001, "memory": 8269, "data_time": 0.01668, "loss_rpn_cls": 0.00337, "loss_rpn_bbox": 0.0102, "loss_cls": 0.0563, "acc": 97.76733, "loss_bbox": 0.10462, "loss": 0.17449, "time": 0.84111}
{"mode": "train", "epoch": 4, "iter": 250, "lr": 0.001, "memory": 8269, "data_time": 0.01635, "loss_rpn_cls": 0.00325, "loss_rpn_bbox": 0.00987, "loss_cls": 0.05534, "acc": 97.80151, "loss_bbox": 0.10403, "loss": 0.17248, "time": 0.83589}
{"mode": "train", "epoch": 4, "iter": 300, "lr": 0.001, "memory": 8269, "data_time": 0.0173, "loss_rpn_cls": 0.00341, "loss_rpn_bbox": 0.00975, "loss_cls": 0.05398, "acc": 97.86047, "loss_bbox": 0.09949, "loss": 0.16663, "time": 0.83718}
{"mode": "train", "epoch": 4, "iter": 350, "lr": 0.001, "memory": 8269, "data_time": 0.01675, "loss_rpn_cls": 0.00341, "loss_rpn_bbox": 0.00998, "loss_cls": 0.05578, "acc": 97.79694, "loss_bbox": 0.10505, "loss": 0.17422, "time": 0.83791}
{"mode": "val", "epoch": 4, "iter": 314, "lr": 0.001, "mAP": 0.89101, "AP50": 0.891}
